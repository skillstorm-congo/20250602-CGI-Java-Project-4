// this file contain custom types we can use 
// to ensure properties are being passed correctly
// we can also set our useState default value to something of this type

export type timeOffType = {
    id: number,
    employeeId: number,
    fiscalYearFiscalWeekStart: string
    fiscalYearFiscalWeekEnd: string,
    dateStart: string,
    dateEnd: string,
    comment: string,
    approved: boolean | null,
    approvedDate: string | null,
    submitted: boolean | null,
    submittedDate: string | null 
}

export type payStubType = {

    id: number,
    employeeId: number,
    timesheetId1: number,
    timesheetId2: number,
    fiscalYearFiscalWeekStart: string,
    fiscalYearFiscalWeekEnd: string,
    dateStart: string,
    dateEnd: string,
    payStubDate: string | null,
    totalRegularHours: number,
    totalOvertimeHours: number,
    totalTimeOffHours: number,
    totalPaid: number
}

// ------------------------------------------------------------------
//TIMESHEET related types

//https://www.typescriptlang.org/docs/handbook/advanced-types.html
//Mapped types - take an existing type and make each of its properties optional
//general version I called Nullable<type> = thatType "T" OR null 
export type Nullable<T> = T | null

//using primitive types (string, number, boolean)
//JS values that are being passed around & matches runtime
export type TimesheetType = {
    id: number;
    employeeId: number;

    //generated by db server only or read-only stuff
    fiscalYearFiscalWeek: string | null;
    totalRegularHours: number | null;
    totalOvertimeHours: number | null;
    totalTimeOffHours: number | null;

    //dates API accepts as a string "YYYY-MM-DD" as LocalDate
    //JS will serialize date-time if kept as Date -> parsing errors
    //HTML <input type="date"> reads and writes "YYYY-MM-DD" strings
    dateStart: string;
    dateEnd: string | null;

    submitted: boolean | null;
    submittedDate: string | null;
    
    approved: boolean | null;
    approvedDate: string | null,
    
    comment: string | null;
    timeOffId: number | null;

    //hours as nullable so they can cleared with update endpoint
    regularHoursDay1: number | null;
    regularHoursDay2: number | null;
    regularHoursDay3: number | null;
    regularHoursDay4: number | null;
    regularHoursDay5: number | null;
    overtimeHoursDay1: number | null;
    overtimeHoursDay2: number | null;
    overtimeHoursDay3: number | null;
    overtimeHoursDay4: number | null;
    overtimeHoursDay5: number | null;
    timeOffHoursDay1: number | null;
    timeOffHoursDay2: number | null;
    timeOffHoursDay3: number | null;
    timeOffHoursDay4: number | null;
    timeOffHoursDay5: number | null;
}

//for my POST logHours() where employee pastes JSON body type to not send computed/locked fields by accident
//?: is ts "optional property" for keys that can be empty/not filled in or have something in it
//  this is to help employee skill not having to enter "null" repeatedly
//Resource "Describing Simple Types": https://devblogs.microsoft.com/typescript/walkthrough-interfaces/#Subsection_64
export type CreateTimesheetType = {
    id: number;
    employeeId: number;
    dateStart: string;
    dateEnd: string | null;
    comment?: string | null;
    timeOffId?: number | null;
    regularHoursDay1?: number | null;
    regularHoursDay2?: number | null;
    regularHoursDay3?: number | null;
    regularHoursDay4?: number | null;
    regularHoursDay5?: number | null;
    overtimeHoursDay1?: number | null;
    overtimeHoursDay2?: number | null;
    overtimeHoursDay3?: number | null;
    overtimeHoursDay4?: number | null;
    overtimeHoursDay5?: number | null;
    timeOffHoursDay1?: number | null;
    timeOffHoursDay2?: number | null;
    timeOffHoursDay3?: number | null;
    timeOffHoursDay4?: number | null;
    timeOffHoursDay5?: number | null;
}

//for my PUT updateHours() where employee pastes the JSON of key-value pairs into what's updateable
// chunks of logging hours data sent to server when it can't be accessed normally using helper type
// 1 - the timesheet id to update
// 2 - the UpdateableFields or the JSON paste where nullable areas are there or can be empty from the ?:
export type UpdateHoursType = {id: number} & Partial<UpdatableFields>;

//Helper TYPE - to build exported UpdateHoursPayload
//can also use "export type UpdatableFields = Pick<...>;"" but only during clean up
type UpdatableFields = Pick<
  TimesheetType,
  | "comment"
  | "timeOffId"
  | "regularHoursDay1" | "regularHoursDay2" | "regularHoursDay3" | "regularHoursDay4" | "regularHoursDay5"
  | "overtimeHoursDay1" | "overtimeHoursDay2" | "overtimeHoursDay3" | "overtimeHoursDay4" | "overtimeHoursDay5"
  | "timeOffHoursDay1" | "timeOffHoursDay2" | "timeOffHoursDay3" | "timeOffHoursDay4" | "timeOffHoursDay5"
>;

export type EmployeeType = {
    id: number,
    firstName: String,
    lastName: String,
    title: String,
    payRatePerHour: number,
    managerId: number | null
}

// ------------------------------------------------------------------
//USER-SERVICE/LOGIN related types

//match my /user/employeeUser from user-service
export type UserType = {
    id: number,
    employeeId: number,
    username: String,
    role: "USER" | "MANAGER" | "ADMIN" | string;
}